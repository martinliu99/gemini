## 1.settings with "_" prefix are built-in setting having highest priority, and only used by AopLauncher.
## 2.remainder settings have lower priority, and can be user-defined to customize AopLauncher.


## launcher settings

# launcher active profile, i.e., default | dev
# aop.launcher.activeProfile = 

# launcher resource path
_aop.launcher.aspectappsPath = ${aop.launcher.launchPath}/aspectapps
_aop.launcher.confPath = ${aop.launcher.launchPath}/conf
_aop.launcher.libPath = ${aop.launcher.launchPath}/lib
_aop.launcher.logsPath = ${aop.launcher.launchPath}/logs
_aop.launcher.workPath = ${aop.launcher.launchPath}/work


## diagnostic settings
# diagnostic strategy, including DISABLED, SIMPLE, DEBUG
# in debug level, all relevant settings such as aop.logger.statusLogLevel, aop.logger.rootLogLevel will be adjusted as debug level.
aop.launcher.diagnosticLevel = DISABLED
aop.launcher.diagnosticClasses = 

aop.launcher.dumpByteCode = false
aop.launcher.byteCodeDumpPath = ${aop.launcher.workPath}/


# logger settings
aop.logger.configLocation = aop-logback.xml

aop.logger.allLogLevel = WARN
aop.logger.includeLocation = false


# class scanner settings
aop.classScanner.enableVerbose = false

# improve class scanning performance with more concise accept jar and package pattern
_aop.classScanner.builtinAcceptJarPatterns = aspectj*.jar, gemini*.jar
aop.classScanner.acceptJarPatterns = 

_aop.classScanner.builtinAcceptPackages = org.aspectj.lang.annotation*, io.gemini*
aop.classScanner.acceptPackages = 

aop.classScanner.workThreads = -1


# BootstrapClassLoader settings
_aop.bootstrapClassLoader.bootstrapClasses = 


# AopClassLoader settings
_aop.aopClassLoader.builtinParentFirstTypeExprs = io.gemini.api.activation..*

aop.aopClassLoader.parentFirstTypeExprs = 
aop.aopClassLoader.parentFirstResourceExprs = 



# aop metrics settings
aop.metrics.summarizeMetricsDetail = false

aop.metrics.bannerTemplate = \
\u0020  ____                      _           _       _         \
\n  / ___|   ___   _ __ ___   (_)  _ __   (_)     (_)   ___  \
\n | |  _   / _ \\ |  _   _ \\  | | |  _ \\  | |     | |  / _ \\ \
\n | |_| | |  __/ | | | | | | | | | | | | | |  _  | | | (_) |\
\n  \\____|  \\___| |_| |_| |_| |_| |_| |_| |_| (_) |_|  \\___/ \
\n                                                           

aop.metrics.launcherStartupSummrayTemplate = \
Activated Gemini:                 ${launcherStartupTime} sec  \
\n  1.Setup Launcher                ${launcherSetupTime} sec      Created Logger:          ${loggerCreationTime} sec \
\n  2.Created AopContext:           ${aopContextCreationTime} sec \     Created ClassSanner:     ${classScannerCreationTime} sec \
\n  3.Configured ClassLoader:       ${classLoaderConfigTime} sec      BootstrapCL:             ${bootstrapCL} sec        AopCL:         ${aopCL} sec \
\n  4.Created AdvisorFactory:       ${advisorFactoryCreationTime} sec      ${advisorSpecs} \
\n  5.Created AopWeaver:            ${aopWeaverCreationTime} sec \
\n  6.Installed ByteBuddy:          ${bytebuddyInstallationTime} sec      WarmupByteBuddy:         ${bytebuddtWarnupTime} sec \
\n  7.Redefined Types:              ${typeRedefiningTime} sec      Weaved Types:            ${typeWeavingTime} sec(${typeRedefiningCount} types) \
\n  8.Uncategorized Time:           ${uncategorizedTime} sec \

aop.metrics.weaverSummrayHeaderTemplate = \
\n|------------------------------------------------------------------------------------------------------------------------------------------------------------| \
\n|         Instrumentation details        |    TotalTime   |   Accepting    | AdvisorCreation|  FastMatching   |  FullMatching |  Transforming  |Uncategorized| \
\n|------------------------------------------------------------------------------------------------------------------------------------------------------------| \

aop.metrics.weaverSummrayDetailTemplate = \
\n|${itemName}|${typeLoadingCount} ${typeLoadingTime}|${typeAcceptingCount} ${typeAcceptingTime}|${advisorCreationCount} ${advisorCreationTime}|${typeFastMatchingCount} ${typeFastMatchingTime}|${typeMatchingCount} ${typeMatchingTime}|${typeTransformationCount} ${typeTransformationTime}|    ${uncategorizedTime}| \
\n|------------------------------------------------------------------------------------------------------------------------------------------------------------| \

aop.metrics.weaverSummrayPerCLTemplate = \
${aop.metrics.weaverSummrayDetailTemplate} 

aop.metrics.appStartupSummrayTemplate = \
Started Application:           ${appStartupTime} sec \
\n  1.Started Gemini:            ${launcherStartupTime} sec \
\n  2.Weaved Types:              ${tyepWeavingTime} sec (${tyepTransformationCount} types) \
\n  3.Uncategorized Time:        ${uncategorizedTime} sec (including application startup) \


aop.typeWorldFactory.workMode = singleton

aop.globalTaskExecutor.parallel = false



# aop weaver settings
aop.weaver.matchJoinpoint = ${MATCH_JOINPOINT:true}

aop.weaver.defaultExcludedClassLoaderExprs = \
                *..reflect.DelegatingClassLoader || sun.reflect.misc.MethodUtil, \
                javax.management.remote.rmi.NoCallStackClassLoader, \
                net.bytebuddy.utility.dispatcher.JavaDispatcher$DynamicClassLoader 

aop.weaver.classLoaderExprs = 

aop.weaver.defaultExcludedTypeExprs = \
                *..$JaxbAccessor* || *..$Proxy*, \
                *..$$*ByCGLIB$$* || *..$$*SpringCGLIB$$* || javassist..* || org.groovy..* 

aop.weaver.typeExprs = 


aop.weaver.classInitializerAdvice = 
aop.weaver.classMethodAdvice = 
aop.weaver.instanceConstructorAdvice = 
aop.weaver.instanceMethodAdvice = 


# weaver installer settings
# bytebuddy redefinition strategy, including DISABLED, RETRANSFORMATION, REDEFINITION
aop.weaver.redefinitionStrategy = RETRANSFORMATION



# Advisor Factory global settings
aop.factories.factoryExprs = 


aop.factories.defaultMatchingClassLoaderExprs = \
                org.apache.catalina.loader.WebappClassLoader || org.apache.catalina.loader.ParallelWebappClassLoader, \
                org.eclipse.jetty.webapp.WebAppClassLoader


# create AspectClassLoader for instrumenting JoinpointClassLoader or share one if possible
aop.factories.shareAspectClassLoader = true

# list JoinpointClassLoaders following format 'CL1, CL2, CL3; CL2, CL4' to mark ClassLoaders might load same class
aop.factories.conflictJoinpointClassLoaders = 

aop.factories.asmAutoCompute = false



# Advisor Factory(aspectapp) common settings, and could be overridden per factory
# define types and resources should be loaded from Joinpoint ClassLoader
aop.factory.joinpointTypeExprs = 
aop.factory.joinpointResourceExprs = 

# joinpoint matcher settings
aop.factory.matchJoinpoint = true

aop.factory.classLoaderExprs = 

aop.factory.typeExprs = 

aop.factory.advisorExprs = 


aop.factory.defaultMatchingClassLoaderExprs = 


# create AspectClassLoader for instrumenting JoinpointClassLoader or share one if possible
aop.factory.shareAspectClassLoader = true

# list JoinpointClassLoaders following format 'CL1, CL2, CL3; CL2, CL4' to mark ClassLoaders might load same class
aop.factory.conflictJoinpointClassLoaders = 

