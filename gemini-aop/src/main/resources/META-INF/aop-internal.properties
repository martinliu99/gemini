## 1.settings with "_" prefix are built-in setting having highest priority, and only used by AopLauncher.
## 2.remainder settings have lower priority, and can be user-defined to customize AopLauncher.


## launcher settings

# launcher active profile, i.e., default | dev
# aop.launcher.activeProfile = 

# launcher resource path
_aop.launcher.aspectoriesPath = ${aop.launcher.launchPath}/aspectories
_aop.launcher.confPath = ${aop.launcher.launchPath}/conf
_aop.launcher.libPath = ${aop.launcher.launchPath}/lib
_aop.launcher.logsPath = ${aop.launcher.launchPath}/logs
_aop.launcher.workPath = ${aop.launcher.launchPath}/work


## diagnostic settings
# diagnostic strategy, including DISABLED, SIMPLE, DEBUG
# in debug level, all relevant settings such as aop.logger.statusLogLevel, aop.logger.rootLogLevel will be adjusted as debug level.
aop.launcher.diagnosticLevel = DISABLED
aop.launcher.diagnosticClasses = 

aop.launcher.dumpByteCode = false
aop.launcher.byteCodeDumpPath = ${aop.launcher.workLocation}/


# logger settings
aop.logger.configLocation = aop-log4j2.xml
aop.logger.simpleInitialization = true

# log4j2.component.properties settings
# begin with aop.logger. prefix

# log4j2.loggerContextFactory setting is deprecated since log4j 2.24.0
#_aop.logger.log4j2.loggerContextFactory = org.apache.logging.log4j.core.impl.Log4jContextFactory
_aop.logger.log4j.provider = org.apache.logging.log4j.core.impl.Log4jProvider

_aop.logger.log4j2.skipJansi = true

# use async ContextSelector
#aop.logger.Log4jContextSelector = org.apache.logging.log4j.core.selector.ClassLoaderContextSelector
aop.logger.Log4jContextSelector = org.apache.logging.log4j.core.async.AsyncLoggerContextSelector

_aop.logger.log4j2.disable.jmx = true
_aop.logger.log4j2.enableJndiContextSelector = false
_aop.logger.log4j2.enableJndiJdbc = false
_aop.logger.log4j2.enableJndiJms = false
_aop.logger.log4j2.enableJndiLookup = false
# begin with aop.logger. prefix

# 'logger:' prefix should be added to support Log4j2 StrLookup and refer to other settings defined in launcher.
aop.logger.logFilePath = ${logger:aop.launcher.launchPath:-${sys:user.home}}/logs
aop.logger.logFilePattern = %d{yyyy-MM-dd HH:mm:ss,SSS} [%thread] %-5level [gemini %X{}] %C.%M(%L) - %msg%n
aop.logger.logConsolePattern = %d{yyyy-MM-dd HH:mm:ss,SSS} [%-8.-8thread] %-5level [gemini %X{}] (%F:%L) - %msg%n

aop.logger.statusLogLevel = WARN
aop.logger.allLogLevel = 
aop.logger.includeLocation = false


# class scanner settings
aop.classScanner.enableVerbose = false

# improve class scanning performance with more concise accept jar and package pattern
_aop.classScanner.builtinAcceptJarPatterns = aspectj*.jar, gemini*.jar
aop.classScanner.acceptJarPatterns = 

_aop.classScanner.builtinAcceptPackages = org.aspectj.lang.annotation*, io.gemini*
aop.classScanner.acceptPackages = 

aop.classScanner.workThreads = -1


# BootstrapClassLoader settings
_aop.bootstrapClassLoader.bootstrapClasses = 


# AopClassLoader settings
_aop.aopClassLoader.builtinParentFirstTypePatterns = io.gemini.api.activation..*
aop.aopClassLoader.parentFirstTypePatterns = 
aop.aopClassLoader.parentFirstResourcePatterns = 



# aop metrics settings
aop.metrics.summarizeMetricsDetail = false

aop.metrics.bannerTemplate = \
\u0020  ____                      _           _       _         \
\n  / ___|   ___   _ __ ___   (_)  _ __   (_)     (_)   ___  \
\n | |  _   / _ \\ |  _   _ \\  | | |  _ \\  | |     | |  / _ \\ \
\n | |_| | |  __/ | | | | | | | | | | | | | |  _  | | | (_) |\
\n  \\____|  \\___| |_| |_| |_| |_| |_| |_| |_| (_) |_|  \\___/ \
\n                                                           

aop.metrics.launcherStartupSummrayTemplate = \
Launched Gemini:                  ${launcherStartupTime} sec  \
\n  1.Created Logger:               ${loggerCreationTime} sec \
\n  2.Created AopContext:           ${aopContextCreationTime} sec \     Created ClassSanner:     ${classScannerCreationTime} sec \
\n  3.Configured BootstrapCL:       ${bootstrapCLConfigTime} sec \     Configured AopCL:        ${aopCLConfigTime} sec \
\n  4.Created AspectFactory:        ${aspectFactoryCreationTime} sec      ${aspectSpecs} \
\n  5.Created AspectWeaver:         ${aspectWeaverCreationTime} sec \
\n  6.Installed ByteBuddy:          ${bytebuddyInstallationTime} sec      WarmupByteBuddy:         ${bytebuddtWarnupTime} sec \
\n  7.Redefined Types:              ${typeRedefiningTime} sec      Weaved Types:            ${typeWeavingTime} sec (${typeRedefiningCount} types) \
\n  8.Uncategorized Time:           ${uncategorizedTime} sec \

aop.metrics.weaverSummrayHeaderTemplate = \
\n|------------------------------------------------------------------------------------------------------------------------------------------------------------| \
\n|         Instrumentation details        |    TotalTime   |   Accepting    | AspectCreation |  FastMatching  |  FullMatching  |  Transforming  |Uncategorized| \
\n|------------------------------------------------------------------------------------------------------------------------------------------------------------| \

aop.metrics.weaverSummrayDetailTemplate = \
\n|${itemName}|${typeLoadingCount} ${typeLoadingTime}|${typeAcceptingCount} ${typeAcceptingTime}|${aspectCreationCount} ${aspectCreationTime}|${typeFastMatchingCount} ${typeFastMatchingTime}|${typeMatchingCount} ${typeMatchingTime}|${typeTransformationCount} ${typeTransformationTime}|    ${uncategorizedTime}| \
\n|------------------------------------------------------------------------------------------------------------------------------------------------------------| \

aop.metrics.weaverSummrayPerCLTemplate = \
${aop.metrics.weaverSummrayDetailTemplate} 

aop.metrics.appStartupSummrayTemplate = \
Started Application:           ${appStartupTime} sec \
\n  1.Started Gemini:            ${launcherStartupTime} sec \
\n  2.Weaved Types:              ${tyepWeavingTime} sec (${tyepTransformationCount} types) \
\n  3.Uncategorized Time:        ${uncategorizedTime} sec (including application startup) \


aop.typeWorldFactory.workMode = singleton

aop.globalTaskExecutor.parallel = false



# joinpoint matcher settings
aop.joinpointMatcher.matchJoinpoint = ${MATCH_JOINPOINT:true}

aop.joinpointMatcher.includedClassLoaders = 

_aop.joinpointMatcher.builtinExcludedClassLoaders = \
                sun.reflect.DelegatingClassLoader, \
                jdk.internal.reflect.DelegatingClassLoader, \
                sun.reflect.misc.MethodUtil, \
                javax.management.remote.rmi.NoCallStackClassLoader, \
                net.bytebuddy.utility.dispatcher.JavaDispatcher$DynamicClassLoader
aop.joinpointMatcher.excludedClassLoaders = 

aop.joinpointMatcher.includedTypePatterns = 

_aop.joinpointMatcher.builtinExcludedTypePatterns =  \
                io.gemini..*, \
                sun.reflect..*, \
                jdk.internal.reflect..*, \
                net.bytebuddy..*, \
                org.aspectj..*, \
                io.github.classgraph..*, \
                org.slf4j..*, \
                org.groovy..*, \
                javassist..*
aop.joinpointMatcher.excludedTypePatterns = 


# joinpoint transformer settings
aop.joinpointTransformer.classInitializerAdvice = 
aop.joinpointTransformer.classMethodAdvice = 
aop.joinpointTransformer.instanceConstructorAdvice = 
aop.joinpointTransformer.instanceMethodAdvice = 


# weaver installer settings
# bytebuddy redefinition strategy, including DISABLED, RETRANSFORMATION, REDEFINITION
aop.weaver.redefinitionStrategy = RETRANSFORMATION



# aspectories settings
aop.aspectories.includedAspectories = 
aop.aspectories.excludedAspectories = 


aop.aspectories.defaultMatchingClassLoaders = \
                org.apache.catalina.loader.WebappClassLoader, \
                org.apache.catalina.loader.ParallelWebappClassLoader, \
                org.eclipse.jetty.webapp.WebAppClassLoader


# create AspectClassLoader for instrumenting JoinpointClassLoader or share one if possible
aop.aspectories.shareAspectClassLoader = true

# list JoinpointClassLoaders following format 'CL1, CL2, CL3; CL2, CL4' to mark ClassLoaders might load same class
aop.aspectories.conflictJoinpointClassLoaders = 

aop.aspectories.asmAutoCompute = false



# aspectory common settings, and could be overrode per aspectory
# define types and resources should be loaded from Joinpoint ClassLoader
aop.aspectory.joinpointTypes = 
aop.aspectory.joinpointResources = 

# joinpoint matcher settings
aop.aspectory.matchJoinpoint = true

aop.aspectory.includedClassLoaders = 
aop.aspectory.excludedClassLoaders = 

aop.aspectory.includedTypePatterns = 
aop.aspectory.excludedTypePatterns = 

aop.aspectory.includedAspects = 
aop.aspectory.excludedAspects = 


aop.aspectory.defaultMatchingClassLoaders = 


# create AspectClassLoader for instrumenting JoinpointClassLoader or share one if possible
aop.aspectory.shareAspectClassLoader = true

# list JoinpointClassLoaders following format 'CL1, CL2, CL3; CL2, CL4' to mark ClassLoaders might load same class
aop.aspectory.conflictJoinpointClassLoaders = 

